name: Windows Build (MSYS2 MinGW, Qt6 + OpenCV, full runtimes)

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          release: true
          update: true
          msystem: UCRT64
          install: >
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-qt6-base
            mingw-w64-ucrt-x86_64-qt6-tools
            mingw-w64-ucrt-x86_64-opencv
            mingw-w64-ucrt-x86_64-ffmpeg
            mingw-w64-ucrt-x86_64-tbb
            mingw-w64-ucrt-x86_64-zlib
            mingw-w64-ucrt-x86_64-freetype
            mingw-w64-ucrt-x86_64-harfbuzz
            mingw-w64-ucrt-x86_64-brotli
            mingw-w64-ucrt-x86_64-libpng
            mingw-w64-ucrt-x86_64-bzip2
            mingw-w64-ucrt-x86_64-zstd
            mingw-w64-ucrt-x86_64-glib2
            mingw-w64-ucrt-x86_64-gstreamer
            mingw-w64-ucrt-x86_64-gst-plugins-base
            mingw-w64-ucrt-x86_64-gst-plugins-good
            mingw-w64-ucrt-x86_64-libiconv
            mingw-w64-ucrt-x86_64-gettext
            zip

      - name: Configure (CMake + Ninja)
        shell: msys2 {0}
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=/ucrt64 \
            -DOpenCV_DIR=/ucrt64/lib/cmake/opencv4 \
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$(pwd)/build/bin

      - name: Build
        shell: msys2 {0}
        run: cmake --build build --config Release --parallel

      - name: Find EXE
        id: findexe
        shell: msys2 {0}
        run: |
          set -euo pipefail
          shopt -s nullglob
          candidates=()

          # 1) najprej poglej v build/bin
          if [ -d build/bin ]; then
            while IFS= read -r -d '' f; do candidates+=("$f"); done < <(find build/bin -maxdepth 1 -type f -name "*.exe" -print0)
          fi
          # 2) sicer preišči build/, izloči CMakeFiles in a.exe
          if [ ${#candidates[@]} -eq 0 ]; then
            while IFS= read -r -d '' f; do candidates+=("$f"); done < <(find build -type f -name "*.exe" ! -path "*/CMakeFiles/*" ! -path "*/Testing/*" ! -name "a.exe" -print0)
          fi
          if [ ${#candidates[@]} -eq 0 ]; then
            echo "No .exe produced"; exit 1
          fi

          # vzemi največji .exe (običajno je pravi)
          max=0; exe=""
          for f in "${candidates[@]}"; do
            size=$(stat -c%s "$f")
            if (( size > max )); then max=$size; exe="$f"; fi
          done

          echo "EXE=$exe" >> $GITHUB_ENV
          echo "Found EXE: $exe"

      - name: Bundle Qt runtimes (windeployqt)
        shell: msys2 {0}
        run: |
          EXE_WIN=$(cygpath -w "$EXE")
          windeployqt-qt6 --release "$EXE_WIN"

      - name: Copy OpenCV/FFmpeg + GLib/GStreamer + MinGW runtimes
        shell: msys2 {0}
        run: |
          BIN_DIR=$(dirname "$EXE")
          # OpenCV + FFmpeg
          cp /ucrt64/bin/libopencv*.dll "$BIN_DIR"/
          cp /ucrt64/bin/avcodec-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/avformat-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/avutil-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/swscale-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/swresample-*.dll "$BIN_DIR"/ || true
          # extra odvisnosti
          cp /ucrt64/bin/libtbb*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/zlib1.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libfreetype-6.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libharfbuzz-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libbrotli*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libpng16-16.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libbz2-1.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libzstd*.dll "$BIN_DIR"/ || true
          # GLib/GStreamer
          cp /ucrt64/bin/libglib-2.0-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgobject-2.0-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgio-2.0-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libintl-8.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libiconv-2.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libpcre2-8-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libffi-8.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgstreamer-1.0-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgstbase-1.0-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgstapp-1.0-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgstaudio-1.0-0.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgstvideo-1.0-0.dll "$BIN_DIR"/ || true
          # MinGW runtime
          cp /ucrt64/bin/libstdc++-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgcc_s_*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libwinpthread-*.dll "$BIN_DIR"/ || true

      - name: Package ZIP
        shell: msys2 {0}
        run: |
          BIN_DIR=$(dirname "$EXE")
          cd "$BIN_DIR"/..
          ZIP="$RUNNER_TEMP/LiveVideoMagnification-msys2.zip"
          zip -r "$ZIP" "$(basename "$BIN_DIR")"
          ZIP_WIN=$(cygpath -w "$ZIP")
          echo "ZIP_WIN=$ZIP_WIN" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: LiveVideoMagnification-msys2
          path: ${{ env.ZIP_WIN }}
