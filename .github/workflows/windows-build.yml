name: Windows Build (MSYS2 MinGW, Qt6 + OpenCV, final no-GStreamer)

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up MSYS2 (UCRT64) + deps
        uses: msys2/setup-msys2@v2
        with:
          release: true
          update: true
          msystem: UCRT64
          install: >
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-qt6-base
            mingw-w64-ucrt-x86_64-qt6-tools
            mingw-w64-ucrt-x86_64-opencv
            mingw-w64-ucrt-x86_64-ffmpeg
            mingw-w64-ucrt-x86_64-tbb
            mingw-w64-ucrt-x86_64-zlib
            mingw-w64-ucrt-x86_64-freetype
            mingw-w64-ucrt-x86_64-harfbuzz
            mingw-w64-ucrt-x86_64-brotli
            mingw-w64-ucrt-x86_64-libpng
            mingw-w64-ucrt-x86_64-bzip2
            mingw-w64-ucrt-x86_64-zstd
            mingw-w64-ucrt-x86_64-double-conversion
            mingw-w64-ucrt-x86_64-libb2
            mingw-w64-ucrt-x86_64-graphite2
            mingw-w64-ucrt-x86_64-fribidi
            mingw-w64-ucrt-x86_64-ntldd-git
            zip

      - name: Configure (CMake + Ninja)
        shell: msys2 {0}
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=/ucrt64 \
            -DOpenCV_DIR=/ucrt64/lib/cmake/opencv4 \
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$(pwd)/build/bin

      - name: Build
        shell: msys2 {0}
        run: cmake --build build --config Release --parallel

      - name: Find EXE
        id: findexe
        shell: msys2 {0}
        run: |
          set -euo pipefail; shopt -s nullglob
          candidates=()
          [ -d build/bin ] && while IFS= read -r -d '' f; do candidates+=("$f"); done < <(find build/bin -maxdepth 1 -type f -name "*.exe" -print0)
          if [ ${#candidates[@]} -eq 0 ]; then
            while IFS= read -r -d '' f; do candidates+=("$f"); done < <(find build -type f -name "*.exe" ! -path "*/CMakeFiles/*" ! -name "a.exe" -print0)
          fi
          [ ${#candidates[@]} -eq 0 ] && { echo "No .exe produced"; exit 1; }
          max=0; exe=""
          for f in "${candidates[@]}"; do s=$(stat -c%s "$f"); (( s>max )) && { max=$s; exe="$f"; }; done
          echo "EXE=$exe" >> $GITHUB_ENV
          echo "Found EXE: $exe"

      - name: Bundle Qt runtimes (windeployqt)
        shell: msys2 {0}
        run: |
          EXE_WIN=$(cygpath -w "$EXE")
          windeployqt-qt6 --release "$EXE_WIN"

      # odstrani Qt Multimedia (ne želimo GLib/GStreamer)
      - name: Strip Qt Multimedia
        shell: msys2 {0}
        run: |
          BIN_DIR=$(dirname "$EXE")
          rm -rf "$BIN_DIR/plugins/mediaservice" "$BIN_DIR/plugins/multimedia" || true
          rm -f  "$BIN_DIR"/Qt6Multimedia*.dll || true

      # prisilno dodaj kritične DLL-je (+ duplicate za libtbb12.dll)
      - name: Force-add critical DLLs
        shell: msys2 {0}
        run: |
          set -e
          BIN_DIR=$(dirname "$EXE")
          # TBB: če obstaja samo tbb12.dll, naredi tudi libtbb12.dll
          if [ -f /ucrt64/bin/libtbb12.dll ]; then
            cp /ucrt64/bin/libtbb12.dll "$BIN_DIR"/
          elif [ -f /ucrt64/bin/tbb12.dll ]; then
            cp /ucrt64/bin/tbb12.dll "$BIN_DIR"/
            cp -f "$BIN_DIR/tbb12.dll" "$BIN_DIR/libtbb12.dll"
          fi
          cp /ucrt64/bin/zlib1.dll "$BIN_DIR"/          || true
          cp /ucrt64/bin/libfreetype-6.dll "$BIN_DIR"/  || true
          cp /ucrt64/bin/libharfbuzz-0.dll "$BIN_DIR"/  || true

      - name: Copy core DLLs (OpenCV/FFmpeg/MinGW)
        shell: msys2 {0}
        run: |
          BIN_DIR=$(dirname "$EXE")
          cp /ucrt64/bin/libopencv*.dll "$BIN_DIR"/
          cp /ucrt64/bin/avcodec-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/avformat-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/avutil-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/swscale-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/swresample-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libstdc++-*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libgcc_s_*.dll "$BIN_DIR"/ || true
          cp /ucrt64/bin/libwinpthread-*.dll "$BIN_DIR"/ || true

      # ntldd sweep: pobere vse odvisnosti, a filtrira GLib/GStreamer
      - name: Auto-bundle remaining deps (ntldd, no-GLib)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          BIN_DIR=$(dirname "$EXE")
          list_deps() {
            ntldd -R "$1" | awk '/=>/ && $3 ~ /^\/ucrt64\/bin\// {print $3}' |
            grep -viE '/libg(streamer|st|object|io|glib)-|/gio-|/gmodule-|/gst'
          }
          tmp=$(mktemp)
          find "$BIN_DIR" -maxdepth 1 -type f \( -name "*.exe" -o -name "*.dll" \) -print0 | \
            xargs -0 -I{} bash -lc 'list_deps "{}"' >> "$tmp" || true
          [ -d "$BIN_DIR/plugins" ] && find "$BIN_DIR/plugins" -type f -name "*.dll" -print0 | \
            xargs -0 -I{} bash -lc 'list_deps "{}"' >> "$tmp" || true
          sort -u "$tmp" | while read -r d; do cp -n "$d" "$BIN_DIR"/ || true; done
          rm -f "$tmp"

      - name: Package ZIP
        shell: msys2 {0}
        run: |
          BIN_DIR=$(dirname "$EXE")
          cd "$BIN_DIR"/..
          ZIP="$RUNNER_TEMP/LiveVideoMagnification-msys2.zip"
          zip -r "$ZIP" "$(basename "$BIN_DIR")"
          echo "ZIP_WIN=$(cygpath -w "$ZIP")" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: LiveVideoMagnification-msys2
          path: ${{ env.ZIP_WIN }}
