name: Windows Build (CPU) & Installer (cached, fixed)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSVC devcmd (VS2022, x64)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install tools
      run: choco install -y git cmake innosetup

    # ---- CACHE: vcpkg downloads (FFmpeg/Qt/OpenCV tarballs) ----
    - name: Restore vcpkg downloads cache
      uses: actions/cache@v4
      with:
        path: C:\vcpkg\downloads
        key: vcpkg-downloads-${{ runner.os }}-v1

    # ---- CACHE: vcpkg installed packages (DLL-ji/binariji) ----
    - name: Restore vcpkg installed cache
      uses: actions/cache@v4
      with:
        path: |
          C:\vcpkg\installed
          C:\vcpkg\packages
        key: vcpkg-installed-opencv-qt-${{ runner.os }}-v1
        restore-keys: |
          vcpkg-installed-opencv-qt-
          vcpkg-installed-
          vcpkg-

    - name: Bootstrap vcpkg (once)
      shell: pwsh
      run: |
        if (-not (Test-Path C:\vcpkg)) {
          git clone https://github.com/microsoft/vcpkg C:\vcpkg
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat
        }

    - name: Install libs via vcpkg
      run: C:\vcpkg\vcpkg.exe install opencv[ffmpeg]:x64-windows qtbase:x64-windows --clean-after-build

    - name: Configure (CMake, VS2022)
      run: >
        cmake -S . -B build
        -G "Visual Studio 17 2022"
        -A x64
        -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=x64-windows
        -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release -- /m

    - name: Collect payload
      shell: pwsh
      run: |
        $ws = $env:GITHUB_WORKSPACE
        $payload = Join-Path $ws "payload"
        New-Item -ItemType Directory -Force -Path $payload | Out-Null

        $exe = Get-ChildItem -Path "$ws\build\Release" -Filter *.exe -ErrorAction SilentlyContinue | Select-Object -First 1
        if (-not $exe) { $exe = Get-ChildItem -Path "$ws\build" -Recurse -Filter *.exe | Select-Object -First 1 }
        if (-not $exe) { throw "No EXE produced. Check build output." }
        Copy-Item $exe.FullName $payload

        Get-ChildItem -Path "$ws\build\Release" -Filter *.dll -ErrorAction SilentlyContinue | % { Copy-Item $_.FullName $payload -ErrorAction SilentlyContinue }
        Get-ChildItem -Path "$ws\build" -Recurse -Filter *.dll -ErrorAction SilentlyContinue | % { Copy-Item $_.FullName $payload -ErrorAction SilentlyContinue }
        if (Test-Path "C:\vcpkg\installed\x64-windows\bin") { Copy-Item "C:\vcpkg\installed\x64-windows\bin\*.dll" $payload -ErrorAction SilentlyContinue }

        Write-Host "Payload content:"
        Get-ChildItem -Path $payload | Format-Table -AutoSize

    - name: Build installer (Inno Setup)
      shell: cmd
      run: |
        set WS=%GITHUB_WORKSPACE%
        echo Workspace: %WS%
        echo Listing payload:
        dir "%WS%\payload"
        "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /DAppPayload="%WS%\payload" "%WS%\installer.iss"

    - name: Upload installer
      uses: actions/upload-artifact@v4
      with:
        name: LiveVideoMagnification-Installer
        path: LiveVideoMagnification-Setup.exe
