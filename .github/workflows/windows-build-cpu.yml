name: Windows Build (CPU) & Installer (Qt windeployqt)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSVC devcmd (VS2022, x64)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install tools
      run: choco install -y git cmake innosetup

    # Cache
    - name: Restore vcpkg downloads cache
      uses: actions/cache@v4
      with:
        path: C:\vcpkg\downloads
        key: vcpkg-downloads-${{ runner.os }}-v1

    - name: Restore vcpkg installed cache
      uses: actions/cache@v4
      with:
        path: |
          C:\vcpkg\installed
          C:\vcpkg\packages
        key: vcpkg-installed-opencv-qt-${{ runner.os }}-v1
        restore-keys: |
          vcpkg-installed-opencv-qt-
          vcpkg-installed-
          vcpkg-

    - name: Bootstrap vcpkg (once)
      shell: pwsh
      run: |
        if (-not (Test-Path C:\vcpkg)) {
          git clone https://github.com/microsoft/vcpkg C:\vcpkg
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat
        }

    - name: Install libs via vcpkg
      run: C:\vcpkg\vcpkg.exe install opencv[ffmpeg]:x64-windows qtbase:x64-windows --clean-after-build

    - name: Configure (CMake, VS2022)
      run: >
        cmake -S . -B build
        -G "Visual Studio 17 2022"
        -A x64
        -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=x64-windows
        -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release -- /m

    # -------------------------
    # DEPLOY Qt z windeployqt
    # -------------------------
    - name: Deploy Qt runtimes (windeployqt)
      shell: pwsh
      run: |
        $ws = $env:GITHUB_WORKSPACE
        $exe = Get-ChildItem -Path "$ws\build\Release" -Filter *.exe -ErrorAction SilentlyContinue | Select-Object -First 1
        if (-not $exe) { $exe = Get-ChildItem -Path "$ws\build" -Recurse -Filter *.exe | Select-Object -First 1 }
        if (-not $exe) { throw "No EXE produced. Check build output." }

        # Kandidatne poti do windeployqt (vcpkg jih pogosto da sem)
        $candidates = @(
          "C:\vcpkg\installed\x64-windows\tools\qt6\bin\windeployqt.exe",
          "C:\vcpkg\packages\qtbase_x64-windows\tools\qt6\bin\windeployqt.exe"
        )
        $wqt = $null
        foreach ($c in $candidates) { if (Test-Path $c) { $wqt = $c; break } }
        if (-not $wqt) { throw "windeployqt.exe not found in vcpkg tools." }

        # Ciljna mapa za 'deploy' je payload (tja bo windeployqt skopiral Qt dll + plugins)
        $payload = Join-Path $ws "payload"
        New-Item -ItemType Directory -Force -Path $payload | Out-Null

        # Zagon windeployqt – kopira tudi 'platforms\qwindows.dll'
        & $wqt --release --no-translations --no-quick-import --no-opengl-sw `
               --dir "$payload" "$($exe.FullName)"

        # Dodatno: skopiraj naš exe (če ga windeployqt ni prenesel) in ostale dll-je (opencv/ffmpeg)
        Copy-Item $exe.FullName $payload -Force
        Get-ChildItem -Path "$ws\build\Release" -Filter *.dll -ErrorAction SilentlyContinue | % { Copy-Item $_.FullName $payload -Force -ErrorAction SilentlyContinue }
        Get-ChildItem -Path "$ws\build" -Recurse -Filter *.dll -ErrorAction SilentlyContinue | % { Copy-Item $_.FullName $payload -Force -ErrorAction SilentlyContinue }

        # Tudi vcpkg binarije (ffmpeg/opencv), če jih windeployqt ne pobere
        $binDir = "C:\vcpkg\installed\x64-windows\bin"
        if (Test-Path $binDir) { Copy-Item "$binDir\*.dll" $payload -Force -ErrorAction SilentlyContinue }

        Write-Host "Payload content (after windeployqt):"
        Get-ChildItem -Path $payload -Recurse | Format-Table -AutoSize

        # Minimalni qt.conf, da Qt zagotovo najde plugine lokalno
        $qtconf = Join-Path $payload "qt.conf"
        Set-Content -Path $qtconf -Value "[Paths]`nPlugins=."

    - name: Build installer (Inno Setup)
      shell: cmd
      run: |
        set WS=%GITHUB_WORKSPACE%
        "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /DAppPayload="%WS%\payload" "%WS%\installer.iss"

    - name: Upload installer
      uses: actions/upload-artifact@v4
      with:
        name: LiveVideoMagnification-Installer
        path: Output/LiveVideoMagnification-Setup.exe
